<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Velo</title>
    <link rel="stylesheet" href="style.css">
    <link rel="stylesheet" href="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css">
</head>
<body>
    <div id="content"></div>
</body>
<script src="https://cdn.jsdelivr.net/chartist.js/latest/chartist.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAhf3JleYpal9S-xouJYH8lf7Dvz5Y2Nko"></script>
<script>
    content = document.querySelector("#content");

    const createMapScreen = async () => {
        content.innerHTML = "";

        const backButton = document.createElement("a");
        backButton.id = "backButton";
        backButton.textContent = "\u21e6";
        backButton.href = "http://localhost:5000/";
        content.appendChild(backButton);

        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const id = urlParams.get("id");
        const mapDiv = document.createElement("div");
        mapDiv.id = "map";
        content.appendChild(mapDiv);

        const response = await fetch("http://localhost:5000/api/map?id="+id);
        const points = await response.json();

        let coordinates = []
        let accidents = []
        let vitesses = []
        
        let dist = 0;
        for (var i = 0; i < points.length-2; i++) {
            dist += calcDist(points[i].coordX, points[i].coordY, points[i+1].coordX, points[i+1].coordY);
        }
        let pression = (dist/points[points.length-1].coordY>31/30);
        messagePression = pression ? "Gonflé" : "Degonflé"

        let pressionDiv = document.createElement("div");
        pressionDiv.id = "pression"
        pressionDiv.innerHTML = "Pneu: " + messagePression + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Distance Parcourue: " + (1000*dist.toFixed(2)) + "m";
        content.appendChild(pressionDiv)

        let titreGraphique = document.createElement("h2")
        titreGraphique.id = "titreGraphique"
        titreGraphique.textContent = "Evolution de la vitesse (km/h) en fonction du temps (s)"
        content.appendChild(titreGraphique)

        let graphique = document.createElement("div")
        graphique.id = "graphique"
        content.appendChild(graphique)


        for(let i = 0; i < points.length-1; i++){
            temp = {"lng": points[i].coordX, "lat": points[i].coordY}
            coordinates.push(temp);

            if(points[i].accident){
                accidents.push(temp)
            }

            vitesses.push(points[i].vitesse_kmh.toFixed(2))
        }

        const path = new google.maps.Polygon({
            paths: coordinates,
            strokeColor: "#FF0000",
            strokeOpacity: 0.8,
            strokeWeight:2,
            fillOpacity:0
        })

        let map;

        function initMap() {
            map = new google.maps.Map(document.getElementById("map"), {
            center: coordinates[0],
            zoom: 19,
            });
        }

        function calcDist(lat1, lon1, lat2, lon2) {
            var R = 6371; // km
            var dLat = toRad(lat2-lat1);
            var dLon = toRad(lon2-lon1);
            var lat1 = toRad(lat1);
            var lat2 = toRad(lat2);

            var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); 
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
            var d = R * c;
            return d;
        }

        function toRad(Value) {
            return Value * Math.PI / 180;
        }

        initMap()

        path.setMap(map);
        for(a of accidents)
            new google.maps.Marker({position: a, map})

        labels = []
        for(let i = 0; i<vitesses.length; i++){
            labels.push((5*i).toString())
        }

        var options = {
            fullWidth: false,
            // Don't draw the line chart points
            showPoint: false,
            // X-Axis specific configuration
            axisX: {
            // We can disable the grid for this axis
            showGrid: true,
            // and also don't show the label
            },
        };

        new Chartist.Line('#graphique', {
            series: [vitesses], labels
        }, options);

    }

    createMapScreen();
</script>
</html>